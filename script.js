$(document).ready(function () {
    $("#search-button").on("click", function () {
      var searchValue = $("#search-value").val();
  
      // clear input box
      $("#search-value").val("");
  
      searchWeather(searchValue);
    });
  
    $(".history").on("click", "li", function () {
      searchWeather($(this).text());
    });
  
    function makeRow(text) {
      var li = $("<li>").addClass("list-group-item list-group-item-action").text(text);
      $(".history").append(li);
    }
  
    // AJAX HTTP REQUESTS
  
    $.ajax({
      // url
      // Type: String
      // A string containing the URL to which the request is sent.
      url: "/api/getWeather",
      // data
      // Type: PlainObject or String or Array
      // Data to be sent to the server. If the HTTP method is one that cannot have an entity body, such as GET, the data is appended to the URL.
      // When data is an object, jQuery generates the data string from the object's key/value pairs unless the processData option is set to false. For example, { a: "bc", d: "e,f" } 
      // is converted to the string "a=bc&d=e%2Cf". If the value is an array, jQuery serializes multiple values with same key based on the value of the traditional setting
      // (described below). For example, { a: [1,2] } becomes the string "a%5B%5D=1&a%5B%5D=2" with the default traditional: false setting.
      // When data is passed as a string it should already be encoded using the correct encoding for contentType, which by default is application/x-www-form-urlencoded.
      // In requests with dataType: "json" or dataType: "jsonp", if the string contains a double question mark (??) anywhere in the URL or a single question mark (?) in the query  
      // string, it is replaced with a value generated by jQuery that is unique for each copy of the library on the page (e.g. jQuery21406515378922229067_1479880736745).\
      data: {
        zipcode: 97201
      },
  
      // success
      // Type: Function( Anything data, String textStatus, jqXHR jqXHR )
      // A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.
      success: function (result) {
        $("#weather-temp").html("<strong>" + result + "</strong> degrees");
      }
    });
    function searchWeather(searchValue) {
      $.ajax({
        // type (default: 'GET')
        // Type: String
        // An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0.
        type: "GET",
        url: "https://api.openweathermap.org/data/2.5/weather?q=" + searchValue + "&appid=9ad43bd7d81eeecac50dd047c44c95d9",
        // dataType (default: Intelligent Guess (xml, json, script, or html))
        // Type: String
        // The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:
        // "xml": Returns a XML document that can be processed via jQuery.
        // "html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.
        // "script": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests. Prior to jQuery 3.5.0, unsuccessful HTTP responses with a script Content-Type were still executed.
        // "json": Evaluates the response as JSON and returns a JavaScript object. Cross-domain "json" requests that have a callback placeholder, e.g. ?callback=?, are performed using JSONP unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.)
        // "jsonp": Loads in a JSON block using JSONP. Adds an extra "?callback=?" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the cache option is set to true.
        // "text": A plain text string.
        // multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use "text xml" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: "jsonp text xml". Similarly, a shorthand string such as "jsonp xml" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.
        dataType: "json",
        success: function (data) {
          console.log(data);
          
          // create history link for this search
          if (history.indexOf(searchValue) === -1) {
            history.push(searchValue);
            window.localStorage.setItem("history", JSON.stringify(history));
            makeRow(searchValue);
          }
  
          // .empty()
          // Categories: Manipulation > DOM Removal
          // .empty()Returns: jQuery
          // Description: Remove all child nodes of the set of matched elements from the DOM.
          // version added: 1.0.empty()
          // This method does not accept any arguments.
          // This method removes not only child (and other descendant) elements, but also any text within the set of matched elements.
          $("#today").empty();
            }
        })
    }
});